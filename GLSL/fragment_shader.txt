#version 330 core
 
in vec3 fragment_color;
in vec3 fragment_position;
in vec3 fragment_normal;
uniform vec3 light_position; // uniform variables doesn't change during a render call
uniform vec3 camera_position;

out vec3 color_out;
 
void main() {
    vec3 light_color = vec3(1.f, 1.f, 1.f);
    
    // calculating ambient lighting
    vec3 ambient = 0.2f * light_color;
    
    // calculating diffuse color
    vec3 normal = normalize(fragment_normal);
    vec3 fragment_to_light = normalize(light_position - fragment_position);  
    vec3 diffuse = max(dot(normal, fragment_to_light), 0.0) * light_color;
    
    // specular lighting
    vec3 camera_direction = normalize(camera_position - fragment_position);
    vec3 reflection_direction = reflect(-fragment_to_light, normal);  
    vec3 specular = 0.3f * pow(max(dot(camera_direction, reflection_direction), 0.0), 32) * light_color; 
     
    color_out = (ambient + diffuse + specular) * fragment_color;
}
